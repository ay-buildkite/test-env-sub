---
env:
  # We define the base environment here so it can be overridden by CLI
  # or Buildkite UI settings
  BASE_ENVIRONMENT: staging
  # Define a timeout for all commands unless overridden
  DEFAULT_PIPELINE_TIMEOUT: '60'
steps:
  # First step to generate our build information
  # We use 'key' to make this step uniquely identifiable for dependencies
  # and to reference it in error messages
  - key: version-gen
    label: ':git: Generate Version'
    # Using 'command' (singular) because this is a single logical operation
    # even though it has multiple lines
    command: |-
      # We export these variables because they need to be available 
      # for the subsequent commands in this step (buildkite-agent meta-data)
      # Without export, they would only be available in the current shell
      export BUILD_TIME=$$(date '+%Y-%m-%d-%H-%M-%S')
      export GIT_VERSION=$$(git describe --tags --always)

      # buildkite-agent meta-data runs as a separate process, so we needed those
      # environment variables to be exported for buildkite-agent to access them
      # If we don't escape these variables:
      #   1. Buildkite sees $BUILD_TIME and attempts to interpolate it
      #   2. BUILD_TIME doesn't exist at upload time, 
      #      it replaces it with an empty string
      #   3. The pipeline gets saved with empty values baked in
      buildkite-agent meta-data set "BUILD_TIME" "$$BUILD_TIME"
      buildkite-agent meta-data set "GIT_VERSION" "$$GIT_VERSION"

      # We don't need to export FULL_VERSION because:
      #   1. We're only using it in an echo command in the same shell
      #   2. We're not using it in any child processes
      #   3. We don't need it in any subsequent commands
      # We need to escape these variables too because:
      #   1. At pipeline upload time, Buildkite would try to interpolate $GIT_VERSION 
      #    and $BUILD_TIME, but they don't exist yet
      #   2. These variables are only set at runtime after the commands above execute
      FULL_VERSION="$$GIT_VERSION-$$BUILD_TIME"
      echo "Generated version: $$FULL_VERSION"

  # Test step demonstrating local env vars
  - key: test-suite
    label: ':test_tube: Run Tests'
    # Using 'commands' (plural) because these are separate operations
    # that coud potentially run independently
    commands:
      - echo "Running tests for version $$(buildkite-agent meta-data get 'GIT_VERSION')"
      - ./run_tests.sh
    # Step-specific environment variables
    # These override global variables and are evaluated at upload time
    env:
      TEST_LEVEL: full
      TEST_TIMEOUT: '600'
    # This step depends on version generation
    depends_on: version-gen

  # Trigger a downstream pipeline with specific variables
  - key: trigger-deploy
    label: :rocket Trigger deploy
    trigger: deploy-pipeline
    build:
      # 1. These variables (BUILDKITE_BUILD_NUMBER, BASE_ENVIRONMENT, BUILDKITE_COMMIT) 
      #    exist at pipeline upload time
      # 2. We want their values to be "locked in" when the pipeline is uploaded
      # 3. We want these exact values passed to our downstream pipeline
      env:
        DEPLOY_VERSION: ${BUILDKITE_BUILD_NUMBER}
        ENVIRONMENT: ${BASE_ENVIRONMENT}
        GIT_COMMIT: ${BUILDKITE_COMMIT}
      #   1. The command substitution $(...) needs to survive pipeline upload
      #   2. We want these commands to run when the trigger step executes
      #   3. Only then will our metadata values from earlier steps be available
      meta_data:
        version: $$(buildkite-agent meta-data get 'GIT_VERSION')
        build_time: $$(buildkite-agent meta-data get 'BUILD_TIME')
    # This ensures we don't trigger until tests pass
    depends_on: test-suite
